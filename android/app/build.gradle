apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {
	compileSdkVersion 25
	buildToolsVersion '25.0.2'

	defaultConfig {
		applicationId 'technology.unrelenting.freepass'
		minSdkVersion 21
		targetSdkVersion 25
		multiDexEnabled true
		versionCode 1
		versionName '1.0'
		ndk {
			abiFilters 'x86'//, 'arm64-v8a', 'armeabi-v7a'//, 'armeabi'
		}
		externalNativeBuild {
			cmake {
				arguments '-DANDROID_PLATFORM=android-24', '-DANDROID_STL=stlport_shared', '-DANDROID_CPP_FEATURES=exceptions'
			}
        }
	}

	externalNativeBuild {
		cmake {
			path 'CMakeLists.txt'
		}
	}

	dexOptions {
		preDexLibraries true
		dexInProcess = true
	}

	buildTypes {
		release {
			minifyEnabled false
			proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
		}
		debug {
			jniDebuggable true
		}
	}

	sourceSets {
		main.java.srcDirs += 'src/main/kotlin'
		main.jni.srcDirs = []
	}

	splits {
		abi {
			enable true
			reset()
			include 'x86'//, 'arm64-v8a', 'armeabi-v7a'//, 'armeabi'
			universalApk true
		}
	}

	packagingOptions {
		// Dick.
		pickFirst 'META-INF/services/com.fasterxml.jackson.core.JsonFactory'
		exclude 'META-INF/LICENSE'
	}
}

android.applicationVariants.all { variant ->
	// Don't move the task to the top level, it needs the `variant`!
    def javacppTask = task("build${variant.name.capitalize()}Javacpp") {
        inputs.file('src/main/kotlin/technology/unrelenting/freepass/Vault.kt')
        outputs.file('src/main/jni/jniVault.cpp')
        doLast {
            def path = configurations.compile.find { File file -> file.name.startsWith('javacpp') }.absolutePath
            javaexec {
                main = "org.bytedeco.javacpp.tools.Builder"
                classpath path
                args '-cp', variant.javaCompiler.destinationDir,
                        '-cp', variant.javaCompiler.destinationDir.toString()
                               .replace('intermediates/classes', 'tmp/kotlin-classes')
                               .replace('intermediates\\classes', 'tmp\\kotlin-classes'),
                        '-d', 'src/main/jni', '-nocompile', 'technology.unrelenting.freepass.Vault'
            }
        }
    }
    javacppTask.dependsOn variant.javaCompiler
    variant.externalNativeBuildTasks[0].dependsOn javacppTask
}

dependencies {
	compile fileTree(include: ['*.jar'], dir: 'libs')
	testCompile 'junit:junit:4.12'
	compile "com.android.support:support-v4:$support_version"
	compile "com.android.support:appcompat-v7:$support_version"
	compile "com.android.support:recyclerview-v7:$support_version"
	compile "com.android.support:design:$support_version"
	compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
	compile "org.jetbrains.anko:anko-sdk15:$anko_version" // sdk19, sdk21, sdk23 are also available
	compile "org.jetbrains.anko:anko-support-v4:$anko_version"
	compile "org.jetbrains.anko:anko-appcompat-v7:$anko_version"
	compile "org.jetbrains.anko:anko-recyclerview-v7:$anko_version"
	compile "com.fasterxml.jackson.core:jackson-core:$jackson_version"
	compile "com.fasterxml.jackson.core:jackson-annotations:$jackson_version"
	compile "com.fasterxml.jackson.core:jackson-databind:$jackson_version"
	compile "com.fasterxml.jackson.module:jackson-module-kotlin:$jackson_version"
	compile "com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:$jackson_version"
	compile 'io.reactivex.rxjava2:rxjava:2.1.0'
	compile 'io.reactivex.rxjava2:rxkotlin:2.0.3'
	compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
	compile "com.jakewharton.rxbinding2:rxbinding-kotlin:$rxbinding_version"
	compile "com.jakewharton.rxbinding2:rxbinding-appcompat-v7-kotlin:$rxbinding_version"
	compile "com.github.k-kagurazaka.rx-property-android:rx-property:3.1.0"
	compile "com.github.k-kagurazaka.rx-property-android:rx-property-kotlin:3.1.0"
	compile 'org.bytedeco:javacpp:1.1'
}
